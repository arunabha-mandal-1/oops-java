Polymorphism:
    poly = many
    morphism = way to represent
    > many ways to represent a single item or entity
    e.g. a task is performed as a single action but in different ways.
    any language that does not support polymorphism is not object-oriented language; they are known as object basis language. java supports polymorphism.
    it occurs during inheritance.

    creating different constructor is also polymorphism;

Types :
    1. compile time/static polymorphism: achieved via method/operator overloading.(java does not provide operator overloading)
                                         e.g. multiple constructor
                                         java determines which method should call at compile time.

    2. runtime/dynamic polymorphism: achieved by method overriding(same function properties but body is different).
                                     area in Shapes, Circle, Square, Triangle



--- google it ---
if you put final before any method, you cannot override that method.
final methods can somehow provide some performance enhancement.
cuz the compiler will know that that particular method won't be overridden.

early binding : method declared as final
late binding : method not declared as final

-------///////------


final keyword is also to prevent inheritance
class declared as final cannot be inherited by another class
implicitly declare all of its method as final, cuz they ain't going to be overridden and it boosts performance!


polymorphism is not applied to instance variables.

